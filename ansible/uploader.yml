---
- hosts: all
  vars:
    app_root: /srv/apps/video_uploader
    document_root: "{{ app_root }}/public"
    upload_folder: "/video_uploads"
  tasks:
    - name: Load env.yml
      include_vars: file=env.yml
    - block:
      - name: Run the equivalent of "apt-get update" as a separate step
        apt: update_cache=yes
      - name: Copy working files
        copy: src=working dest=/root/
      - name: Copy Nginx source with Upload module
        script: scripts/install_nginx_uploader.sh
        args:
          creates: /root/working/nginx-1.11.8
      - name: Install Redis
        include: redis.yml
      - name: Install postgres
        include: postgres.yml
      - name: Install Ruby
        include: ruby.yml
      - name: Install Passenger
        include: passenger.yml
      - name: Install Nginx service
        copy: src=config/nginx.service dest=/lib/systemd/system/nginx.service
      - name: Enable Nginx service
        service: name=nginx enabled=yes
      - name: Replaces Nginx conf file
        template: src=config/nginx_uploader.conf.j2 dest=/opt/nginx/conf/nginx.conf
        notify: restart_nginx
      - name: Prepares main upload folder
        file: dest={{ upload_folder }} state=directory mode=0777
      - name: Prepares upload folders
        file: dest={{ upload_folder }}/{{ item }} state=directory mode=0777
        with_items: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
      - name: Copy multinorm bash script
        copy: src=scripts/multinorm.sh dest={{ upload_folder }}/multinorm.sh mode=0777
      - name: Install multinorm dependencies
        apt: name={{ item }} state=present
        with_items:
          - ffmpeg
          - sox
      - name: Prepares working folder
        file: dest=/var/esg-videos state=directory mode=0777
      - name: Project Bundle Install
        shell: . /root/.bashrc && cd {{ app_root }} && bundle install --jobs=4 --retry=3
      - name: Add Cronjob
        cron:
          name: Events update
          minute: "0,30"
          job: ". /root/.bashrc && cd {{ app_root }} && RAILS_ENV=production rake scraper:run"
      become: yes
      become_method: sudo
  handlers:
    - name: restart_nginx
      service: name=nginx enabled=yes state=restarted
      become: yes
      become_method: sudo
